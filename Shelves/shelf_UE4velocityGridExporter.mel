global proc shelf_UE4velocityGridExporter () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Export a 3D fluid container as a vector field for use in UE4" 
        -enableBackground 0
        -align "center" 
        -label "StaticGridExport" 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "fga.png" 
        -image1 "fga.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Copyright Epic Games, Inc. All Rights Reserved.\n// Export velocity grid data from a Maya fluid container \n// Description: Writes out velocity grid data in a custom formatted ascii file\n\n\nglobal proc gridExport(){\n\n    //Check to see if the UI window already exists. If it does, it is deleted\n    if(`window -exists gridExport`){\n        \n        deleteUI -window gridExport;\n    }\n    //Create new UI Window\n    window -t \"gridExport\" -rtf 1 -widthHeight 300 300 gridExport;\n    columnLayout rootLayout;\n    frameLayout -labelVisible false -marginWidth 5 -marginHeight 5 ;\n    columnLayout verticalSubframe;\n            \n    setParent ..;\n    text -label \"UE4 Vector Field Exporter\";\n    radioButtonGrp -numberOfRadioButtons 2 -label \"Export Mode\"\n        -labelArray2 \"Single Frame\" \"Sequence\"\n        -select 1\n        -onCommand1 \"intFieldGrp -edit -enable 0 endFrame;\"\n        -onCommand2 \"intFieldGrp -edit -enable 1 endFrame;\"\n    myRadBtnGrp;\n    checkBoxGrp - l \"Cached Fluid?\" -v1 0 isCached;\n    intFieldGrp -l \"Start Frame\" startFrame;\n    intFieldGrp -l \"End Frame\"  -enable 0 -v1 3 endFrame;\n    //intFieldGrp -l \"Increment\" -enable 0 -v1 1 increment;\n    textFieldButtonGrp -l \"Path\"  -text \"C:\\\\\" -buttonCommand \"getFolderPath();\" -buttonLabel \"select\" folderPath;\n    textFieldButtonGrp -l \"Filename prefix\" -text \"vel\" -buttonCommand \"openFolderPath();\" -buttonLabel \"open\" filename;    \n    columnLayout  -columnAttach \"both\" 0 -adjustableColumn true exportButton;\n        button -l \"export\" -c \"iterateExport\";\n    \n    showWindow gridExport;\n}\n\nglobal proc getFolderPath(){\n    string $result[] = `fileDialog2 -fileMode 3 -fileFilter \"Folders\" -dialogStyle 2`;\n    string $folder = $result[0];\n    print $folder;\n    textFieldButtonGrp -edit -text $folder folderPath;\n}\n\nglobal proc openFolderPath(){\n    string $folder = toNativePath(`textFieldButtonGrp -q -text folderPath`);\n    system(\"explorer \" + $folder);\n}\n\nglobal proc iterateExport(){\n\n    int $startFrame = `intFieldGrp -q -v1 startFrame`;\n    int $endFrame = `intFieldGrp -q -v1 endFrame`;\n    //int $increment = `intFieldGrp -q -v1 increment`;\n    string $dataName[] =  {\"velocity\"};\n    int $n = $startFrame;\n    \n    string $sel[] = `ls -sl`;\n    \n    if (size($sel)>1 || size($sel)<1){\n        \n        print(\"ERROR: Please select a single fluid container \\n\");\n        \n    } else {\n\n        string $fluidShape[] = `listRelatives -s $sel[0]`;\n        string $objectCheck = `objectType $fluidShape[0]`;\n       \n        if ($objectCheck == \"fluidShape\") {        \n            \n            int $doit = `checkBoxGrp -q -v1 isCached`;\n            print $doit;\n             \n             if ($doit == 0 ) {\n                          \n                 int $sceneCurTime = `currentTime -q`;\n                 int $sceneMinTime = `playbackOptions -q -minTime`;\n                 if ($sceneCurTime > $startFrame) {\n                     \n                     currentTime $sceneMinTime;\n                     runupToStart($sceneMinTime, $startFrame);             \n                 \n                 } else {\n                 \n                     if ($sceneCurTime < $startFrame) {\n                         runupToStart($sceneCurTime, $startFrame);\n                     }\n                 }\n            }\n            \n            if (`radioButtonGrp -q -select myRadBtnGrp` == 1) {\n                \n                currentTime $n;\n                string $folder = toNativePath(`textFieldButtonGrp -q -text folderPath`);\n                string $filename = `textFieldGrp -q -text filename`;\n                string $filePath = $folder +\"\\\\\"+ $filename + \".\" + $n + \".fga\";\n                print (\"Wrote: \" + $filePath + \"\\n\");               \n                dataExport($dataName[0],$filePath, $fluidShape[0]);\n           \n            } else {\n\n                  for($n = $startFrame; $n < ($endFrame+1); $n++){\n                 \n                     currentTime $n;\n                     string $folder = toNativePath(`textFieldButtonGrp -q -text folderPath`);\n                     string $filename = `textFieldGrp -q -text filename`;\n                     string $filePath = $folder +\"\\\\\"+ $filename + \".\" + $n + \".fga\";\n                     print (\"Wrote: \" + $filePath + \"\\n\");\n                     dataExport($dataName[0],$filePath,$fluidShape[0]); \n                 \n                   }\n             }\n      \n         } else {\n             \n             print(\"ERROR: Please select a fluid container \\n\");\n        \n         }\n    }\n}\n\nglobal proc dataExport(string $dataName, string $filePath, string $myfluidShape){\n        \n    int $voxCount = 0;\n        \n    //Grab the Grid resolution\n    int $res[] = `eval(\"getAttr \" + $myfluidShape + \".res\")`;\n    \n    //switch back to parent transform\n    string $fluidShapeParent[] = `listRelatives -p $myfluidShape`;\n\n    //Grab the voxel container bounding box\n    float $bb[] = `xform -q -ws -bb $fluidShapeParent[0]`;\n\n    //create and open the output file in write mode\n    int $fileId=`fopen $filePath \"w\"`;\n    \n    //Write voxel res\n    fprint $fileId (\"\"+$res[0]+\",\");\n    fprint $fileId (\"\"+$res[1]+\",\");\n    fprint $fileId (\"\"+$res[2]+\",\");\n    //Write bounding Box info\n    fprint $fileId (\"\"+$bb[0]+\",\");\n    fprint $fileId (\"\"+$bb[1]+\",\");\n    fprint $fileId (\"\"+$bb[2]+\",\");\n    fprint $fileId (\"\"+$bb[3]+\",\");\n    fprint $fileId (\"\"+$bb[4]+\",\");\n    fprint $fileId (\"\"+$bb[5]+\",\");\n\n    int $x = 0;\n    int $y = 0;\n    int $z = 0;\n    vector $myV = 0;\n    \n    for($z = 0; $z < $res[2]; $z++){\n       \n        for($y = 0; $y < $res[1]; $y++){\n            \n            for($x = 0; $x < $res[0]; $x++){\n\n                float $v[] = `getFluidAttr -at $dataName -xi $x -yi $y -zi $z`;     \n        \n                $myV = << $v[0], $v[1], $v[2] >>;\n \n                fprint $fileId ($v[0]+\",\"+$v[1]+\",\"+$v[2]+\",\");\n    \n            }\n        }\n    }\n    \n    fclose $fileId;\n}\n\nglobal proc runupToStart(int $baseframe, int $exportFirstFrame) {\n    int $i;\n    for ($i = $baseframe; $i < $exportFirstFrame; $i++) {\n        //print($i+\"...\\n\");\n        currentTime $i;\n    }\n}\n\nprint(\"UE4velocityGridExporter Loaded\");\ngridExport();"
        -sourceType "mel" 
        -commandRepeatable 1
    ;

} 
